using Model;
using Microsoft.AspNetCore.Mvc;
using API.DAL;

namespace API.Controllers
{
	[ApiController]
	[Route("api/[controller]")]
	public class TypeCoteExploitationController : ControllerBase
	{
		private readonly ILogger<TypeCoteExploitationController> logger;

		public TypeCoteExploitationController(ILogger<TypeCoteExploitationController> logger)
		{
			this.logger = logger;
		}

		[HttpGet]
		public async Task<IActionResult> GetAllTypeCoteExploitation()
		{
			try
			{
				return Ok(await TypeCoteExploitationDAO.GetAllAsync().ConfigureAwait(false));
			}
			catch (Exception ex)
			{
				logger.LogError(ex.ToString());
				return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
			}
		}

		[HttpGet("idTypeCoteExploitation={idTypeCoteExploitation}")]
		public async Task<IActionResult> GetTypeCoteExploitationById(int idTypeCoteExploitation)
		{
			try
			{
				return Ok(await TypeCoteExploitationDAO.GetByIdAsync(idTypeCoteExploitation).ConfigureAwait(false));
			}
			catch (Exception ex)
			{
				logger.LogError(ex.ToString());
				return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
			}
		}

		[HttpPut]
		[HttpPost]
		public async Task<IActionResult> StoreTypeCoteExploitation([FromBody] TypeCoteExploitation type)
		{
			try
			{
				return Ok(await TypeCoteExploitationDAO.StoreAsync(type));
			}
			catch (Exception ex)
			{
				logger.LogError(ex.ToString());
				return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
			}
		}
	}
}
