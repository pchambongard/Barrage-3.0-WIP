using Model;
using Model.Utils;
using Npgsql;

namespace API.DAL
{
	public class CoteExploitationDAO
	{
		public static async Task<CoteExploitation> GetByIdAsync(int id)
		{
			try
			{
				await using NpgsqlConnection connection = new("Server=srw-pgtest;Port=5432;Database=barrage;User Id=pgbarrage;Password=DbaBarrage!30;Pooling=false");

				await connection.OpenAsync().ConfigureAwait(false);

				await using NpgsqlCommand commande = new()
				{
					Connection = connection,
					CommandText = "SELECT id, libelle, id_type_cote_exploitation, seuil, criticite FROM cotes_exploitation c WHERE c.id = :id;"
				};

				commande.Parameters.Add(new NpgsqlParameter<int>(":id", id));

				await using NpgsqlDataReader reader = commande.ExecuteReader();

				if (reader.HasRows)
				{
					reader.Read();

					CoteExploitation cote = new(
						id: reader.GetInt32(reader.GetOrdinal("id")),
						libellé: reader.GetString(reader.GetOrdinal("libelle")),
						type: await TypeCoteExploitationDAO.GetByIdAsync(reader.GetInt32(reader.GetOrdinal("id_type_cote_exploitation"))),
						seuil: reader.GetDecimal(reader.GetOrdinal("seuil")),
						criticité: reader.GetInt32(reader.GetOrdinal("criticite")));

					connection.Close();
					connection.Dispose();

					return cote;
				}
				else
				{
					throw new Exception("Aucun élément correspondant.");
				}
			}
			catch (Exception ex)
			{
				throw new ApplicationException("Erreur lors de l'accés a la base de données\n" + ex.Message + "\n" + ex.InnerException, ex);
			}
		}

		public static async Task<List<CoteExploitation>> GetByBarrageAsync(int idbarrage)
		{
			try
			{
				await using NpgsqlConnection connection = new("Server=srw-pgtest;Port=5432;Database=barrage;User Id=pgbarrage;Password=DbaBarrage!30;Pooling=false");
				await connection.OpenAsync().ConfigureAwait(false);

				List<CoteExploitation> cotes = new();

				await using NpgsqlCommand commande = new()
				{
					Connection = connection,
					CommandText = "SELECT id, libelle, id_type_cote_exploitation, seuil, criticite FROM cotes_exploitation c WHERE c.id_barrage = :idbarrage;"
				};

				commande.Parameters.Add(new NpgsqlParameter<int>(":idbarrage", idbarrage));

				await using NpgsqlDataReader reader = commande.ExecuteReader();

				if (reader.HasRows)
				{
					while (await reader.ReadAsync())
					{
						CoteExploitation cote = new(
							id: reader.GetInt32(reader.GetOrdinal("id")),
							libellé: reader.GetString(reader.GetOrdinal("libelle")),
							type: await TypeCoteExploitationDAO.GetByIdAsync(reader.GetInt32(reader.GetOrdinal("id_type_cote_exploitation"))),
							seuil: reader.GetDecimal(reader.GetOrdinal("seuil")),
							criticité: reader.GetInt32(reader.GetOrdinal("criticite")));

						cotes.Add(cote);
					}

					connection.Close();
					connection.Dispose();

					return cotes;
				}
				else
				{
					return new List<CoteExploitation>();
				}
			}
			catch (Exception ex)
			{
				throw new ApplicationException("Erreur lors de l'accés a la base de données\n" + ex.Message + "\n" + ex.InnerException, ex);
			}
		}

		public static async Task<List<CoteExploitation>> GetAllAsync()
		{
			try
			{
				await using NpgsqlConnection connection = new("Server=srw-pgtest;Port=5432;Database=barrage;User Id=pgbarrage;Password=DbaBarrage!30;Pooling=false");

				await connection.OpenAsync().ConfigureAwait(false);

				List<CoteExploitation> cotes = new();

				await using NpgsqlCommand commande = new()
				{
					Connection = connection,
					CommandText = "SELECT id, libelle, id_type_cote_exploitation, seuil, criticite FROM cotes_exploitation"
				};

				await using NpgsqlDataReader reader = commande.ExecuteReader();

				if (reader.HasRows)
				{
					while (await reader.ReadAsync())
					{
						CoteExploitation cote = new(
							id: reader.GetInt32(reader.GetOrdinal("id")),
							libellé: reader.GetString(reader.GetOrdinal("libelle")),
							type: await TypeCoteExploitationDAO.GetByIdAsync(reader.GetInt32(reader.GetOrdinal("id_type_cote_exploitation"))),
							seuil: reader.GetDecimal(reader.GetOrdinal("seuil")),
							criticité: reader.GetInt32(reader.GetOrdinal("criticite")));

						cotes.Add(cote);
					}

					connection.Close();
					connection.Dispose();

					return cotes;
				}
				else
				{
					return new List<CoteExploitation>();
				}
			}
			catch (Exception ex)
			{
				throw new ApplicationException("Erreur lors de l'accés a la base de données\n" + ex.Message + "\n" + ex.InnerException, ex);
			}
		}

		public static async Task<int> StoreAsync(CoteExploitation cote, int idBarrage)
		{
			try
			{
				await using NpgsqlConnection connection = new("Server=srw-pgtest;Port=5432;Database=barrage;User Id=pgbarrage;Password=DbaBarrage!30;Pooling=false");

				await connection.OpenAsync().ConfigureAwait(false);

				if (cote.IsNew())
				{
					await using NpgsqlCommand commande = new()
					{
						Connection = connection,
						CommandText = "INSERT INTO cotes_exploitation(seuil, libelle, id_type_cote_exploitation, criticite, id_barrage) values(:seuil, :libelle, :type, :criticite, :barrage) returning id;"
					};

					commande.Parameters.Add(new NpgsqlParameter<decimal>(":seuil", cote.Seuil));
					commande.Parameters.Add(new NpgsqlParameter<string>(":libelle", cote.Libellé ?? ""));
					commande.Parameters.Add(new NpgsqlParameter<int>(":type", cote.Type?.Id ?? 0));
					commande.Parameters.Add(new NpgsqlParameter<int>(":criticite", cote.Criticité));
					commande.Parameters.Add(new NpgsqlParameter<int>(":barrage", idBarrage));

					cote.Id = (short)await commande.ExecuteNonQueryAsync();

					connection.Close();
					connection.Dispose();

					return 0;
				}
				else
				{
					await using NpgsqlCommand commande = new()
					{
						Connection = connection,
						CommandText = "UPDATE cotes_exploitation SET seuil=:seuil, libelle=:libelle, id_type_cote_exploitation=:type, criticite=:criticite, id_barrage=:id_barrage WHERE id=" + cote.Id
					};

					commande.Parameters.Add(new NpgsqlParameter<decimal>(":seuil", cote.Seuil));
					commande.Parameters.Add(new NpgsqlParameter<string>(":libelle", cote.Libellé ?? ""));
					commande.Parameters.Add(new NpgsqlParameter<int>(":type", cote.Type?.Id ?? 0));
					commande.Parameters.Add(new NpgsqlParameter<int>(":criticite", cote.Criticité));
					commande.Parameters.Add(new NpgsqlParameter<int>(":id_barrage", idBarrage));

					await commande.ExecuteNonQueryAsync();

					connection.Close();
					connection.Dispose();

					return 1;
				}
			}
			catch (Exception ex)
			{
				throw new ApplicationException("Erreur lors de l'accés a la base de données\n" + ex.Message + "\n" + ex.InnerException, ex);
			}
		}
	}
}
