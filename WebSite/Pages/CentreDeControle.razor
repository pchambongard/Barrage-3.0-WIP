@using Model
@using WebSite
@using WebSite.Views
@page "/"

<PageTitle>Centre De Controle</PageTitle>

@if(barrages!.Count == 0)
{
    <text>Loading...</text>
}
else
{
    @foreach (Barrage barrage in barrages)
    {
        var info = infos.Find(x => x.Barrage == barrage.Libellé);
        var link = "/barrage/" + barrage.Id;
        double value = 0;
        double crue = 0;
        double danger = 0;
        double max = 0;
        double min = 0;
        double step = 0;
        @if (info != null && barrage.CotesExploitation.Find(x => x.Criticité == 2) != null)
        {
            crue = (double)barrage.CotesExploitation.Find(x => x.Criticité == 2)!.Seuil;
            value = (double)info!.Valeur;
            min = Math.Truncate(crue * 0.8);
            @if (barrage.CotesExploitation.Find(x => x.Criticité == 4) == null)
            {
                max = Math.Truncate(crue * 1.2);
                danger = max;
            }
            else
            {
                danger = (double)barrage.CotesExploitation.Find(x => x.Criticité == 4)!.Seuil;
                max = Math.Truncate(danger * 1.2);
            }
            step = (max - min) / 4;
        }
        <RadzenCard>
            <NavLink class="nav-link" href="@link"> @barrage.Libellé </NavLink>
            <div class= "wrapper">
                <div class="first">
                    <RadzenRadialGauge Style="width: 250px; height: 250px;">
                        <RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="@step" Min=@min Max=@max TickPosition=GaugeTickPosition.Inside ShowTickLabels="true">
                                <RadzenRadialGaugeScalePointer Value=@value Length="0.8" ShowValue=true>
                                    <Template Context="pointer">
                                        <h5>
                                            @pointer.Value <sup>m</sup>
                                        </h5>
                                    </Template>
                                </RadzenRadialGaugeScalePointer>
                                <RadzenRadialGaugeScaleRange From=@min To=@crue Fill="green" Stroke="true"/>
                                <RadzenRadialGaugeScaleRange From=@crue To=@danger Fill="orange" />
                                <RadzenRadialGaugeScaleRange From=@danger To=@max Fill="red" />
                            </RadzenRadialGaugeScale>
                    </RadzenRadialGauge>
                </div>
                <div class="second">
                    <RadzenDataGrid  Style= "width: 1200px" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Simple"
                        AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Data="@infos.FindAll(x => x.Barrage == barrage.Libellé)" TItem="CapteurView" LogicalFilterOperator="LogicalFilterOperator.Or">
                        <Columns>
                            <RadzenDataGridColumn TItem="CapteurView" Property="Capteur" Filterable="false" Title="Capteur" Width="175px" TextAlign="TextAlign.Center" />
                            <RadzenDataGridColumn TItem="CapteurView" Property="Date" Filterable="false" Title="Date de la dernière mesure" Width="200px" TextAlign="TextAlign.Center" />
                            <RadzenDataGridColumn TItem="CapteurView" Property="Valeur" Filterable="false" Title="Valeur" Width="75px" TextAlign="TextAlign.Center" />
                            <RadzenDataGridColumn TItem="CapteurView" Property="Cote" Filterable="false" Title="Dernière cote atteinte" Width="200px" TextAlign="TextAlign.Center" />
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </div>
        </RadzenCard>
    }
}

<style>
.wrapper {
    overflow: hidden;
}
.first {
    display: inline-block;
    float:left;
}
.second {
    display: inline-block;
    overflow: hidden;
}
</style>

@code
{
    List<Barrage>? barrages = new();
    List<CapteurView> infos = new();

    protected override async Task OnInitializedAsync()
    {
        HttpClient client = new();
        var request = new HttpRequestMessage(HttpMethod.Get, new Uri("http://localhost:5254/api/Barrage/"));
        var response = await client.SendAsync(request).ConfigureAwait(false);
        
        if (response.IsSuccessStatusCode)
        {
            barrages = await response.Content.ReadFromJsonAsync<List<Barrage>>().ConfigureAwait(false);
        }
        foreach (Barrage barrage in barrages!)
        {
            foreach(Capteur capteur in from capteur in barrage.Capteurs where capteur.Actif == true select capteur)
            {
                var capteurRequest = new HttpRequestMessage(HttpMethod.Get, new Uri("http://localhost:5254/api/Mesure/last/idBarrage=" + barrage.Id + "/idCapteur=" + capteur.Id));
                var capteurResponse = await client.SendAsync(capteurRequest).ConfigureAwait(false);

                infos.Add(new(capteur.Id, barrage.Libellé ?? "", capteur.Libellé ?? ""));
                if (capteurResponse.IsSuccessStatusCode)
                {
                    Mesure? mesure = await capteurResponse.Content.ReadFromJsonAsync<Mesure>().ConfigureAwait(false);
                    infos[infos.Count - 1].Date = mesure!.Gdh.ToString();
                    infos[infos.Count - 1].Valeur = mesure!.Valeur;
                    foreach (CoteExploitation cote in barrage.CotesExploitation)
                    {
                        if (mesure.Valeur >= cote.Seuil)
                        {
                            infos[infos.Count - 1].Cote = cote.Libellé ?? "";
                        }
                    }
                }
                else
                {
                    infos[infos.Count - 1].Date = "Pas de mesures dans les deux dernières heures.";
                }
            }
        }
    }
}