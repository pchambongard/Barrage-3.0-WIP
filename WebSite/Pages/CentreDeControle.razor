@using Barrage_Model
@using WebSite
@using WebSite.Views
@using System.Globalization
@page "/"

<PageTitle>Centre De Controle</PageTitle>

@if(barragesView.Count == 0)
{
    <text>Loading...</text>
}
else
{
    @foreach (BarrageView barrage in barragesView)
    {
        barrage.SetGauge();
		var link = "/barrage/" + barrage.Id;
        <RadzenCard>
            <NavLink class="nav-link" href="@link"> @barrage.Libellé </NavLink>
            <div style="display: flex;">
                <div style="float: left;">
                    <RadzenRadialGauge>
                        <RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="@barrage.Step" Min=@barrage.Min Max=@barrage.Max TickPosition=GaugeTickPosition.Inside ShowTickLabels="true">
                                <RadzenRadialGaugeScalePointer Value=@barrage.CapteurPrincipal!.Valeur Length="0.8" ShowValue=true>
                                    <Template Context="pointer">
                                        <h5>
                                            @pointer.Value <sup>m</sup>
                                        </h5>
                                    </Template>
                                </RadzenRadialGaugeScalePointer>
                                <RadzenRadialGaugeScaleRange From=@barrage.Min To=@barrage.Crue Fill="green" Stroke="true"/>
                                <RadzenRadialGaugeScaleRange From=@barrage.Crue To=@barrage.Danger Fill="orange" />
                                <RadzenRadialGaugeScaleRange From=@barrage.Danger To=@barrage.Max Fill="red" />
                            </RadzenRadialGaugeScale>
                    </RadzenRadialGauge>
                </div>
                <div style="float: right;">
                    <RadzenDataGrid AllowColumnResize="true"AllowSorting="true" PageSize="5" AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" Data="@barrage.Capteurs" TItem="CapteurView">
                        <Columns>
                            <RadzenDataGridColumn TItem="CapteurView" Property="Capteur" Filterable="true" Title="Capteur" TextAlign="TextAlign.Center" />
                            <RadzenDataGridColumn TItem="CapteurView" Property="Date" Filterable="true" Title="Date de la dernière mesure" TextAlign="TextAlign.Center" />
                            <RadzenDataGridColumn TItem="CapteurView" Property="Valeur" Filterable="true" Title="Valeur" TextAlign="TextAlign.Center" />
                            <RadzenDataGridColumn TItem="CapteurView" Property="DerniereCoteAtteinte" Filterable="true" Title="Dernière cote atteinte" TextAlign="TextAlign.Center" />
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </div>
        </RadzenCard>
    }
}

@code
{
    List<BarrageView> barragesView = new();
    List<CapteurView> infos = new();

    protected override async Task OnInitializedAsync()
    {
        CultureInfo.CurrentUICulture = new CultureInfo("fr-FR");

        HttpClient client = new();
        List<Barrage>? barrages = new();
        var request = new HttpRequestMessage(HttpMethod.Get, new Uri(Infos.barrageAPI + "/Barrage/"));
        var response = await client.SendAsync(request).ConfigureAwait(false);

        if (response.IsSuccessStatusCode)
        {
            barrages = await response.Content.ReadFromJsonAsync<List<Barrage>>().ConfigureAwait(false);
        }
        barrages!.Sort((x,y) => { return y.Capteurs.FindAll(a => a.Actif == true).Count.CompareTo(x.Capteurs.FindAll(b => b.Actif == true).Count); });

        foreach (Barrage barrage in barrages)
        {
            barragesView.Add(new(barrage.Id, barrage.Libellé!));
            barragesView[barragesView.Count - 1].Cotes = barrage.CotesExploitation;
            foreach(Capteur capteur in from capteur in barrage.Capteurs where capteur.Actif == true select capteur)
            {
                if (capteur.Type!.Id == 3)
                {
                    var capteurRequest = new HttpRequestMessage(HttpMethod.Get, new Uri(Infos.barrageAPI + "/MesureTemperature/last/idCapteur=" + capteur.Id));
                    var capteurResponse = await client.SendAsync(capteurRequest).ConfigureAwait(false);
                    if (capteurResponse.IsSuccessStatusCode)
                    {
                        Mesure? mesure = await capteurResponse.Content.ReadFromJsonAsync<Mesure>().ConfigureAwait(false);
                        if (mesure != null)
                        {
                            barragesView[barragesView.Count - 1].Capteurs.Add(new(capteur.Libellé!, capteur.Type!.Libellé!, mesure.Date, (double)mesure.Valeur));
                        }
                    }
                }
                else
                {
                    if (capteur.Principal == true)
                    {
                        var capteurRequest = new HttpRequestMessage(HttpMethod.Get, new Uri(Infos.barrageAPI + "/Mesure/last/idBarrage=" + barrage.Id + "/idCapteur=" + capteur.Id));
                        var capteurResponse = await client.SendAsync(capteurRequest).ConfigureAwait(false);
                        if (capteurResponse.IsSuccessStatusCode)
                        {
                            Mesure? mesure = await capteurResponse.Content.ReadFromJsonAsync<Mesure>().ConfigureAwait(false);
                            if (mesure != null)
                            {
                                barragesView[barragesView.Count - 1].CapteurPrincipal = new(capteur.Libellé!, capteur.Type!.Libellé!, mesure.Date, (double)mesure.Valeur);
                                barragesView[barragesView.Count - 1].Capteurs.Add(new(capteur.Libellé!, capteur.Type!.Libellé!, mesure.Date, (double)mesure.Valeur));
                            }
                        }
                    }
                    else
                    {
                        var capteurRequest = new HttpRequestMessage(HttpMethod.Get, new Uri(Infos.barrageAPI + "/Mesure/last/idBarrage=" + barrage.Id + "/idCapteur=" + capteur.Id));
                        var capteurResponse = await client.SendAsync(capteurRequest).ConfigureAwait(false);
                        if (capteurResponse.IsSuccessStatusCode)
                        {
                            Mesure? mesure = await capteurResponse.Content.ReadFromJsonAsync<Mesure>().ConfigureAwait(false);
                            if (mesure != null)
                            {
                                barragesView[barragesView.Count - 1].Capteurs.Add(new(capteur.Libellé!, capteur.Type!.Libellé!, mesure.Date, (double)mesure.Valeur));
                            }
                        }
                    }
                }
            }
        }
    }
}