@using System.Globalization
@using CsvHelper
@using WebSite.CSV
@using WebSite.Views
@using WebSite
@using Barrage_Model
@using System.IO
@inject IJSRuntime JS

@page "/barrage/{Id}"

<RadzenCard>

    <h2 style = "text-align:center">@barrage!.Libellé</h2> 

    @if (chartView.IsLoaded == false)
    {
        <text>Loading...</text>
    }
    else
    {
        <div align="left">
            <RadzenDatePicker Style="width: 15%" @bind-value=@date1 TValue="DateTime" ShowTime="true" ShowSeconds="true" HoursStep="1" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm"/>
            <RadzenDatePicker Style="width: 15%" @bind-value=@date2 TValue="DateTime" ShowTime="true" ShowSeconds="true" HoursStep="1" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm"/>
            <RadzenButton Style="width: 50px" Click=@SetChart Icon="refresh" ButtonStyle="ButtonStyle.Light" />
        </div>
        <div class="inner">
            @if (chartView.LimniItems.Count > 0)
            {
                <h3 style = "text-align:center">Limnimétrie</h3>
                <RadzenChart @ref="LimniChart">
                    @foreach (LimniItem item in chartView.LimniItems)
                    {
                        <RadzenLineSeries Smooth="true" Data="@item.Mesures" CategoryProperty="Date" ValueProperty="Valeur" Title="@item.Capteur.Libellé"/>
                    }
                    @foreach (CoteExploitation cote in chartView.Barrage.CotesExploitation)
                    {
                        List<Mesure> coteMesures = new();
                        coteMesures.Add(new(chartView.StartEnd[0], cote.Seuil));
                        coteMesures.Add(new(chartView.StartEnd[1], cote.Seuil));
                        <RadzenLineSeries Data="@coteMesures" CategoryProperty="Date" ValueProperty="Valeur" Title="@cote.Libellé" LineType="LineType.Dashed"/>
                    }
                    <RadzenValueAxis Formatter="@Format">
                        <RadzenAxisTitle Text="Hauteur (m)" />
                    </RadzenValueAxis>
                    <RadzenCategoryAxis Step="@chartView.Step" Padding="30" FormatString="{0:f}"/>
                </RadzenChart>
            }
        </div>
        <div class="inner">
            @if (chartView.LimniItems.Find(x => x.Capteur.Principal == true) != null)
            {
                <h3 style = "text-align:center">Débit</h3>
                <RadzenChart @ref="DebitChart" Style="margin-top: 30px">
                    @if (chartView.LimniItems.Count > 0)
                    {                    
                        @for (int i = 0; i <chartView.LimniItems.Count; i++)
                        {
                            if (chartView.LimniItems[i].Capteur.Principal == true)
                            {
                                <RadzenLineSeries Smooth="true" Data="@chartView.LimniItems[i].Mesures" CategoryProperty="Date" ValueProperty="DebitSortant" Title="Debit Sortant"/>
                                <RadzenLineSeries Smooth="true" Data="@chartView.LimniItems[i].Mesures" CategoryProperty="Date" ValueProperty="DebitEntrant15mn" Title="Debit Entrant Lissé 15 min"/>
                           }
                        }
                    }
                    <RadzenValueAxis Formatter="@Format">
                        <RadzenAxisTitle Text="Debit (m3/s)" />
                    </RadzenValueAxis>
                    <RadzenCategoryAxis Step="@chartView.Step" Padding="30" FormatString="{0:f}"/>
                </RadzenChart>
            }
        </div>
        <div class="inner">
            @if (chartView.PluvioItems.Count > 0)
            {
                <h3 style = "text-align:center">Pluviométrie</h3>
                <RadzenChart @ref="PluvioChart" Style="margin-top: 30px">
                    @foreach (PluvioItem item in chartView.PluvioItems)
                    {
                        <RadzenLineSeries Smooth="true" Data="@item.Mesures" CategoryProperty="Date" ValueProperty="Valeur" Title="@item.Capteur.Libellé"/>
                    }
                    <RadzenValueAxis Formatter="@Format">
                        <RadzenAxisTitle Text="Pluie (mm)" />
                    </RadzenValueAxis>
                    <RadzenCategoryAxis Step="@chartView.Step" FormatString="{0:f}"/>
                </RadzenChart>
            }
        </div>
        <div class="inner">
            @if (chartView.PluvioItems.Count > 0)
            {
                <h3 style = "text-align:center">Pluviométrie Quotidienne</h3>
                <RadzenChart @ref="PluvioQuotidienneChart" Style="margin-top: 30px">
                    <RadzenColumnSeries Data="@pluvioQuotidienneView" CategoryProperty="Date" ValueProperty="Valeur" Title="Pluvio Quotidienne"/>
                    <RadzenValueAxis Formatter="@Format">
                        <RadzenAxisTitle Text="Pluie Cumulée (mm)" />
                    </RadzenValueAxis>
                </RadzenChart>
            }
        </div>
        <div class="inner">
            @if (chartView.TempItems.Count > 0)
            {
                <h3 style = "text-align:center">Température</h3>
                <RadzenChart @ref="TempChart" Style="margin-top: 30px">
                    @foreach (TempItem item in chartView.TempItems)
                    {
                        <RadzenLineSeries Smooth="true" Data="@item.Mesures" CategoryProperty="Date" ValueProperty="Valeur" Title="@item.Capteur.Libellé"/>
                    }
                    <RadzenValueAxis Formatter="@Format">
                        <RadzenAxisTitle Text="Température (°C)" />
                    </RadzenValueAxis>
                    <RadzenCategoryAxis Step="@chartView.Step" FormatString="{0:f}"/>
                </RadzenChart>
            }
        </div>
        <div class="inner" align="center">
            @if (chartView.LimniItems.Count > 0)
            {
                <RadzenButton Text="Export Limnimétrie" Icon="save" Click=@OnClickLimni/>
            }
        </div>
        <div class ="inner" align="center">
            @if (chartView.PluvioItems.Count > 0)
            {
                <RadzenButton Text="Export Pluviométrie" Icon="save" Click=@OnClickPluvio/>
                <RadzenButton Text="Export Pluviométrie Quotidienne" Icon="save" Click=@OnClickPluvioQuotidienne/>
            }
        </div>
        <div class ="inner" align="center">
            @if (chartView.TempItems.Count > 0)
            {
                <RadzenButton Text="Export Température (min-max / jour)" Icon="save" Click=@OnClickTemp/>
            }
        </div>
        <div class ="inner" align="center">
            @if (chartView.LimniItems.Count > 0 || chartView.PluvioItems.Count > 0 || chartView.PluvioItems.Count > 0)
            {
                <RadzenButton Text="Tout Exporter" Icon="save" Click=@OnClickAll ButtonStyle="ButtonStyle.Success"/>
            }
        </div>
    }
</RadzenCard>
<style>
.inner {
    padding-top:25px;
}
</style>
@code
{
    [Parameter]
    public string Id { get; set; } = "";

    DateTime date1 = DateTime.Now - TimeSpan.FromDays(14);
    DateTime date2 = DateTime.Now;

    private ChartView chartView = new();
    private List<Mesure>? pluvioQuotidienne = new();
    private List<MesurePluvioQuotidienneView>? pluvioQuotidienneView = new();
    private Barrage? barrage = new();

    private RadzenChart LimniChart = new();
    private RadzenChart DebitChart = new();
    private RadzenChart PluvioChart = new();
    private RadzenChart PluvioQuotidienneChart = new();
    private RadzenChart TempChart = new();

    protected string Format (object value) { return (decimal.Round(Convert.ToDecimal(value), 3)).ToString(); }

    protected void Reload() { LimniChart.Reload(); DebitChart.Reload(); PluvioChart.Reload(); PluvioQuotidienneChart.Reload(); TempChart.Reload(); }

    protected async void OnClickAll()
    {
        if (chartView.LimniItems.Count > 0)
        {
            await OnClickLimni();
        }
        if (chartView.PluvioItems.Count > 0)
        {
            await OnClickPluvio();
            await OnClickPluvioQuotidienne();
        }
        if (chartView.TempItems.Count > 0)
        {
            await OnClickTemp();
        }
    }

    protected async Task OnClickLimni()
    {
        List<MesureLimniCSV> mesures = new();
        foreach (LimniItem item in chartView.LimniItems)
        {
            if (item.Capteur.Principal == true)
            {
                foreach (Mesure mesure in item.Mesures)
                {
                    mesures.Add(new MesureLimniCSV(barrage!.Libellé!, item.Capteur.Libellé!, mesure.Date, mesure.Valeur, mesure.Volume, mesure.DebitSortant, mesure.DebitEntrant15mn));
                }
            }
            else
            {
                foreach (Mesure mesure in item.Mesures)
                {
                    mesures.Add(new MesureLimniCSV(barrage!.Libellé!, item.Capteur.Libellé!, mesure.Date, mesure.Valeur));
                }
            }
        }
        string path = MesureLimniCSV.MesuresToCSV(mesures, barrage!.Libellé!, "Limni");
        FileStream stream = File.Open(path, FileMode.Open);
        await DownloadFileFromStream(stream, Path.GetFileName(path));
    }
    protected async Task OnClickPluvio()
    {
        List<MesurePluvioCSV> mesures = new();
        foreach (PluvioItem item in chartView.PluvioItems)
        {
            foreach (Mesure mesure in item.Mesures)
            {
                mesures.Add(new MesurePluvioCSV(barrage!.Libellé!, item.Capteur.Libellé!, mesure.Date, mesure.Valeur));
            }
        }
        string path = MesurePluvioCSV.MesuresToCSV(mesures, barrage!.Libellé!, "Pluvio");
        FileStream stream = File.Open(path, FileMode.Open);
        await DownloadFileFromStream(stream, Path.GetFileName(path));
    }
    protected async Task OnClickPluvioQuotidienne()
    {
        List<MesurePluvioQuotidienneCSV> mesures = new();
        foreach (PluvioItem item in chartView.PluvioItems)
        {
            foreach (Mesure mesure in pluvioQuotidienne!)
            {
                if (item.Capteur.Id == mesure.IdCapteur)
                {
                    mesures.Add(new MesurePluvioQuotidienneCSV(barrage!.Libellé!, item.Capteur.Libellé!, mesure.Date, mesure.Valeur));
                }
            }
        }
        string path = MesurePluvioQuotidienneCSV.MesuresToCSV(mesures, barrage!.Libellé!, "PluvioQuotidienne");
        FileStream stream = File.Open(path, FileMode.Open);
        await DownloadFileFromStream(stream, Path.GetFileName(path));
    }
    protected async Task OnClickTemp()
    {
        List<MesureTempCSV> mesures = new();
        foreach (TempItem item in chartView.TempItems)
        {
            for(DateTime date = chartView.StartEnd[0]; date.Date <= chartView.StartEnd[1].Date; date = date.AddDays(1))
            {
                List<MesureTempérature> filter = item.Mesures.FindAll(x => x.Date.DayOfYear == date.DayOfYear);
                if (filter.Count > 0)
                {
                    var min = filter.Min(x => x.Valeur);
                    var max = filter.Max(x => x.Valeur);
                    mesures.Add(new MesureTempCSV(barrage!.Libellé!, item.Capteur.Libellé!, date.ToShortDateString(), min, max));
                }
            }
        }
        string path = MesureTempCSV.MesuresToCSV(mesures, barrage!.Libellé!, "Temp");
        FileStream stream = File.Open(path, FileMode.Open);
        await DownloadFileFromStream(stream, Path.GetFileName(path));
    }

    protected async Task DownloadFileFromStream(Stream stream, string name)
    {
        await JS.InvokeVoidAsync("downloadFileFromStream", name, new DotNetStreamReference(stream));
    }

    protected override async Task OnParametersSetAsync() { CultureInfo.CurrentUICulture = new CultureInfo("fr-FR"); await SetChart(); }

    protected async Task SetChart()
    {
        chartView = new();
        chartView.SetDate(date1, date2);
        CultureInfo.CurrentUICulture = new CultureInfo("fr-FR");

        HttpClient client = new();
        var getBarrageByIdRequest = new HttpRequestMessage(HttpMethod.Get, new Uri(Infos.barrageAPI + "/Barrage/idBarrage=" + Id));
        var getBarrageByIdResponse = await client.SendAsync(getBarrageByIdRequest).ConfigureAwait(false);
        barrage = await getBarrageByIdResponse.Content.ReadFromJsonAsync<Barrage>().ConfigureAwait(false);

        if (getBarrageByIdResponse.IsSuccessStatusCode)
        {
            barrage!.Capteurs.Sort((x, y) => { int ret = String.Compare(x.Libellé, y.Libellé); return ret; });
            chartView.Barrage = barrage;

            foreach (Capteur capteur in from capteur in barrage.Capteurs where capteur.Actif == true select capteur)
            {
                if(capteur.Type!.Id == 1)
                {
                    var request = new HttpRequestMessage(HttpMethod.Get, new Uri(Infos.barrageAPI + "/Mesure/idBarrage=" + barrage.Id + "/idCapteur=" + capteur.Id));
                    request.Content = JsonContent.Create(chartView.StartEnd);
                    var response = await client.SendAsync(request).ConfigureAwait(false);

                    if (response.IsSuccessStatusCode)
                    {
                        List<Mesure>? mesures = await response.Content.ReadFromJsonAsync<List<Mesure>>().ConfigureAwait(false);
                        chartView.LimniItems.Add(new LimniItem(capteur, mesures!));
                    }
                }
                else if (capteur.Type!.Id == 2)
                {
                    var request = new HttpRequestMessage(HttpMethod.Get, new Uri(Infos.barrageAPI + "/Mesure/idBarrage=" + barrage.Id + "/idCapteur=" + capteur.Id));
                    request.Content = JsonContent.Create(chartView.StartEnd);
                    var response = await client.SendAsync(request).ConfigureAwait(false);

                    if (response.IsSuccessStatusCode)
                    {
                        List<Mesure>? mesures = await response.Content.ReadFromJsonAsync<List<Mesure>>().ConfigureAwait(false);
                        chartView.PluvioItems.Add(new PluvioItem(capteur, mesures!));
                    }

                    request = new HttpRequestMessage(HttpMethod.Get, new Uri(Infos.barrageAPI + "/MesurePluvioQuotidienne/idCapteur=" + capteur.Id));
                    request.Content = JsonContent.Create(chartView.StartEnd);
                    response = await client.SendAsync(request).ConfigureAwait(false);

                    if (response.IsSuccessStatusCode)
                    {
                        pluvioQuotidienne = await response.Content.ReadFromJsonAsync<List<Mesure>>().ConfigureAwait(false);
                        foreach (Mesure mesure in pluvioQuotidienne!)
                        {
                            pluvioQuotidienneView!.Add(new MesurePluvioQuotidienneView(mesure.Date.ToString("M", new CultureInfo("fr-FR")), mesure.Valeur));
                        }
                    }
                }
                else if (capteur.Type!.Id == 3)
                {
                    var request = new HttpRequestMessage(HttpMethod.Get, new Uri(Infos.barrageAPI + "/MesureTemperature/idCapteur=" + capteur.Id));
                    request.Content = JsonContent.Create(chartView.StartEnd);
                    var response = await client.SendAsync(request).ConfigureAwait(false);

                    if (response.IsSuccessStatusCode)
                    {
                        List<MesureTempérature>? mesures = await response.Content.ReadFromJsonAsync<List<MesureTempérature>>().ConfigureAwait(false);
                        chartView.TempItems.Add(new TempItem(capteur, mesures!));
                    }
                }
            }
        }
        Reload();
        chartView.IsLoaded = true; 
    }
}
