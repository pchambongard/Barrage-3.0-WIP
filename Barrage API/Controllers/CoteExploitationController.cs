using Microsoft.AspNetCore.Mvc;
using Barrage_API.DAL;
using Barrage_Model;

namespace Barrage_API.Controllers
{
	[ApiController]
	[Route("api/[controller]")]
	public class CoteExploitationController : ControllerBase
	{
		private readonly ILogger<CoteExploitationController> logger;

		public CoteExploitationController(ILogger<CoteExploitationController> logger)
		{
			this.logger = logger;
		}

		[HttpGet]
		public async Task<IActionResult> GetAllCoteExploitation()
		{
			try
			{
				return Ok(await CoteExploitationDAO.GetAllAsync().ConfigureAwait(false));
			}
			catch (Exception ex)
			{
				logger.LogError(ex.ToString());
				return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
			}
		}

		[HttpGet("idCoteExploitation={idCoteExploitation}")]
		public async Task<IActionResult> GetCoteExploitationById(int idCoteExploitation)
		{
			try
			{
				return Ok(await CoteExploitationDAO.GetByIdAsync(idCoteExploitation).ConfigureAwait(false));
			}
			catch (Exception ex)
			{
				logger.LogError(ex.ToString());
				return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
			}
		}

		[HttpGet("idBarrage={idBarrage}")]
		public async Task<IActionResult> GetCoteExploitationByBarrage(int idBarrage)
		{
			try
			{
				return Ok(await CoteExploitationDAO.GetByBarrageAsync(idBarrage).ConfigureAwait(false));
			}
			catch (Exception ex)
			{
				logger.LogError(ex.ToString());
				return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
			}
		}

		[HttpPut("idBarrage={idBarrage}")]
		[HttpPost("idBarrage={idBarrage}")]
		public async Task<IActionResult> StoreCoteExploitation([FromBody] CoteExploitation cote, int idBarrage)
		{
			try
			{
				return Ok(await CoteExploitationDAO.StoreAsync(cote, idBarrage));
			}
			catch (Exception ex)
			{
				logger.LogError(ex.ToString());
				return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
			}
		}
	}
}